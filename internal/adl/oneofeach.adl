module helix.protoapp.requests {

import common.http.*;
import common.*;
import common.db.DbTable;
import sys.types.*;

// comment
/// doccmt
@Path "localanno"
type Hello<A> = Post<HelloReq, HelloResp<Vector<Vector<Vector<A>>>,Int32,Float>>;

struct Const {
  
};

type Literal<T> = StringMap<T>;
type StrLiteral = Literal<String>;
annotation StrLiteral { "a" : "b" } ;

struct A {
  String a;
};
struct B {
  Int32 b;
};
union MyConfig {
  A a;
  B b;
};
type MyConfigMap = StringMap<MyConfig>;
annotation MyConfig { "a" : { "a" : "mystring" } } ;
annotation MyConfig { "b" : { "b" : 10 } } ;
annotation MyConfigMap { 
  "a b" : { "b" : { "b" : 10 } },
  "a a" : { "a" : { "a" : "hw" } }
} ;

/// doconstr
@SA { "a" : "b" }
struct HelloReq {
  String name;
};

struct SA {
  String a;
};

struct HelloResp<A,B,C> {
};

/// docontype
@Path "/debug/time"
type CurrentTime = Get<Instant>;

/// doconnewtype
@Path "/debug/dummy-exception"
newtype DummyException = Post<String, Unit>;

union LoginResp<T> {
  @SA { "a" : "b" }
  T accessToken;
};

annotation Path "mod anno str";

annotation HelloReq::name Path "field anno";

annotation HelloReq DbTable {
  "withIdPrimaryKey" : true,
  "indexes" : [["username"]]
};

};
